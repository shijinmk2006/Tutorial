public class FileValidationQueueData
{
    public int ClientId { get; set; }
    public int FileQueueMasterId { get; set; }
    public string UserName { get; set; }
}
 public class ModifiedColumns
 {
     public byte[] ProcessedFile { get; set; }
     public string[] IdentifierId { get; set; }
     public string PivotId { get; set; }
     public string ValueId { get; set; }
     public string Error { get; set; }
 }
 public class wrapper
 {
     public string location { get; set; }
     public PayViewSharedLogics.Model.ModifiedColumns modifiedColumns { get; set; }
     public List<string> excelColumn { get; set; }

     public FileValidationQueueData fileValidationQueueData { get; set; }
 }

public async Task<bool> PivotFile(WrapperModel wrapper)
{
    int clientid = wrapper.fileValidationQueueData.ClientId;
    SaveData($"invoked the post method from {wrapper.location}", clientid);
    string blobLocation = string.Empty;
    byte[] file = await azureBlobStorageHelper.FileDownloadFromBlob(wrapper.location);
    LoadOptions opt = new LoadOptions();
    opt.MemorySetting = MemorySetting.MemoryPreference;
    using (MemoryStream stream = new(file))
    {
        Workbook workbook = new(stream, opt);
        Worksheet worksheet = workbook.Worksheets.First();
        Cells cells = worksheet.Cells;
        cells.MemorySetting = (MemorySetting.MemoryPreference);
        Worksheet ws = workbook.Worksheets[0];
        ws.Cells.DeleteBlankColumns();
        int maxdatacol = ws.Cells.MaxDataColumn;
        int maxdatarow = ws.Cells.MaxDataRow;
        String cellname = CellsHelper.CellIndexToName(maxdatarow, maxdatacol);
        Worksheet sheet2 = workbook.Worksheets[workbook.Worksheets.Add()];
        sheet2.Name = "ConvertedSheet";
        Aspose.Cells.Pivot.PivotTableCollection pivotTables = sheet2.PivotTables;
        int index = pivotTables.Add("=" + worksheet.Name + "!A1:" + cellname, "A1", "PivotTable1");
        Aspose.Cells.Pivot.PivotTable pivotTable = pivotTables[index];
        pivotTable.RowGrand = false;
        pivotTable.ColumnGrand = false;
        pivotTable.RowHeaderCaption = wrapper.excelColumn.Where(x => wrapper.modifiedColumns.IdentifierId[0].Trim().ToLower() == x.Trim().ToLower()).Select(x => x).FirstOrDefault();
        pivotTable.ColumnHeaderCaption = wrapper.excelColumn.Where(x => wrapper.modifiedColumns.PivotId.Trim().ToLower() == x.Trim().ToLower()).Select(x => x).FirstOrDefault();

        for (int i = 0; i < wrapper.modifiedColumns.IdentifierId.Count(); i++)
        {
            if (!String.IsNullOrEmpty(wrapper.modifiedColumns.IdentifierId[i]))
            {
                pivotTable.AddFieldToArea(Aspose.Cells.Pivot.PivotFieldType.Row, wrapper.excelColumn.Where(x => wrapper.modifiedColumns.IdentifierId[i].Trim().ToLower() == x.Trim().ToLower()).Select(x => x).FirstOrDefault());
            }
        }
        pivotTable.AddFieldToArea(Aspose.Cells.Pivot.PivotFieldType.Column, wrapper.excelColumn.Where(x => wrapper.modifiedColumns.PivotId.Trim().ToLower() == x.Trim().ToLower()).Select(x => x).FirstOrDefault());
        pivotTable.AddFieldToArea(Aspose.Cells.Pivot.PivotFieldType.Data, wrapper.excelColumn.Where(x => wrapper.modifiedColumns.ValueId.Trim().ToLower() == x.Trim().ToLower()).Select(x => x).FirstOrDefault());

        for (int i = 0; i < pivotTable.RowFields.Count; i++)
        {
            pivotTable.RowFields[i].SetSubtotals(PivotFieldSubtotalType.Automatic, false);
        }

        Worksheet pivotsheet = workbook.Worksheets["ConvertedSheet"];


        pivotsheet.PivotTables[0].ShowDrill = false;
        pivotsheet.PivotTables[0].RefreshData();
        pivotsheet.PivotTables[0].CalculateData();

        SaveData($"invoked ShowDrill the post method from {wrapper.location}", clientid);

        Worksheet ws2 = workbook.Worksheets[1];
        int maxdatacol2 = ws2.Cells.MaxDataColumn;
        int maxdatarow2 = ws2.Cells.MaxDataRow;
        String cellname2 = CellsHelper.CellIndexToName(maxdatarow2, maxdatacol2);
        Worksheet srcSheet = workbook.Worksheets[1];
        Aspose.Cells.Range sourceRange = srcSheet.Cells.CreateRange("A1:" + cellname2 + "");
        Worksheet destSheet = workbook.Worksheets[workbook.Worksheets.Add()];
        destSheet.Name = FileConstants.PayrollRegisterSheet;
        Aspose.Cells.Range destRange = destSheet.Cells.CreateRange("A1:" + cellname2 + "");
        destRange.Copy(sourceRange);
        destSheet.Cells.DeleteRow(0);
        workbook.Worksheets.RemoveAt(1);
        SaveData($"invoked Save the post method from {wrapper.location}", clientid);
        using (MemoryStream validatedStream = new())
        {
            workbook.Save(validatedStream, SaveFormat.Xlsx);
            validatedStream.Seek(0, SeekOrigin.Begin);
            byte[] validatedFile = new byte[validatedStream.Length];
            validatedStream.Read(validatedFile, 0, validatedFile.Length);
            if (validatedFile.Length > 0)
            {

                StringBuilder blobname = new(Path.Combine("payrollregister", wrapper.fileValidationQueueData.ClientId.ToString(), Path.GetFileName(wrapper.location)));
                Tuple<bool, string> retData = await azureBlobStorageHelper.BulkFileStreamUploadToBlobAsync(validatedFile, wrapper.fileValidationQueueData.ClientId, "payrollregister", Path.GetFileNameWithoutExtension(wrapper.location), Path.GetFileName(wrapper.location));
                UpdateFileQueueMasterData(wrapper.fileValidationQueueData.ClientId, wrapper.fileValidationQueueData.FileQueueMasterId, (int)FileUploadStatus.InProgress, retData.Item2, wrapper.fileValidationQueueData.UserName);
                await queueMessageService.SendMessage(wrapper.fileValidationQueueData, "horizontalfilequeue");
            }
        }
    }

    SaveData($"invoked FileStreamUploadToBlob the post method from {blobLocation}", clientid);

    return true;
}
